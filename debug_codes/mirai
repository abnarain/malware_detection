The malware is comprised of two parts :
a) The actual binary on the client, written in C
b) The Command and Control part which is the infrastructure for
invoking the botnet, written in Go.

I have mostly read the client part as that is of our interest (unless
we want to do a whole setup of the botnet).

Comments on the client code:
a) The code is parallelized with pthreads and bunch of SIGnals
b) Progress on user prompt {password, login} - has standard set of this tuple to try.
c) Is telnet connection {closed, connecting etc}, mounted partitions,
detecting architecture{arm, mpsl, spc, m68k, ppc, x86, mips, sh4},
utilities {Wget, tftp} etc do work or not.
It is 500 reponses per minute at peak performace - as reported by the hacker.
d) kills ssh telnet - (takes the argument of the port used by the
service) and also another botnet called Anime!


Control flow:
a) Does SYN scanning to find out machine to get a response (exempts
Defense, IANA etc IP addresses to be scanned!) - using raw packets
(which means extremely fast).

b) The IP addresses are sent to a server and subsequently they download
the binary using wget or tftp(busybox utility), or worst downloads a
script which can in-turn download the malware on a fresh device.

c) This happens in a loop all the time.

There is a lot of state maintatined in tables etc on the client binary
running on IoT and many tricks to make this fast and running.




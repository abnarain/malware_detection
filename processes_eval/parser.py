from operator import itemgetter
import numpy as np
from collections import defaultdict
import operator
from matplotlib import pylab as plt
from collections import Counter
import sys

def gen_plot(processes,filename):
    fig = plt.figure(figsize=(10,10))
    ax = fig.add_subplot(111)

    c = Counter(processes).items()
    c.sort(key=itemgetter(1))
    c.reverse()
    #c=c[1:]
    #c=c[:len(c)/2]
    labels, values = zip(*c)
    ll=[]
    for i in labels:
        if not (i[0] == '['):
            ll.append(i.split('/')[-1])
        else:
            ll.append(i)
    print labels
    print "------"
    print ll
    indexes = np.arange(len(labels))
    width = 0.5
    ax.bar(indexes, values, width)
    plt.xticks(indexes+width*0.5 , ll, rotation=90)
    plt.tick_params(axis='both', which='major', labelsize=10)
    
    plt.savefig(filename+'.pdf')

def panda_plot(processes,filename):
    import pandas    
    letter_counts = Counter(processes)
    df = pandas.DataFrame.from_dict(letter_counts, orient='index')
    df.sort_index()
    df.plot(kind='bar')

    fig = plt.figure()
    ax = fig.add_subplot(111)
    plt.savefig(filename+'.pdf')
    
    
if __name__=='__main__':
    if not(len(sys.argv) ==2):
        print "usage process_eval.py --input --output file"
    filename=sys.argv[2]
    with open(sys.argv[1]) as inputfile:
        pid_count=0
        processes= []
        for i, line in enumerate(inputfile):
            line= line.strip()
            parts = line.split()
            processes.append(parts[4])
            if parts[0]=='PID':
                pid_count +=1
            else:
                pass
    print "total number of processes", pid_count
    gen_plot(processes,filename)

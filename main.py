import scipy ,sys, getopt, math
import numpy as np
from configs import *
from spectral_analysis import *
from time_analysis import *

def filereader(filename,fs): 
    z= scipy.fromfile(open(filename), dtype=scipy.complex64)
    print "length of total z= ", len(z)
    # dtype with scipy.int16, scipy.int32, scipy.float32, scipy.complex64 or whatever type you were using.
    mag, phase,x,y = [], [], [], []
    '''
    start_sec=10
    end_sec=20
    z_needed = z[start_sec*fs: end_sec*fs]
    z=z_needed
    '''
    print z[0:100]
    sys.exit(1)
    len_z = int(len(z))
    print "length of needed z= ", len(z)
    #len_z = int(20.0/6*len(z))
    #len_z = int(400.0/6000*len(z))
    for i in range(0, len_z):
        mag.append(np.absolute(z[i]))
        x.append(z[i].real)
        y.append(z[i].imag)
        phase.append(np.angle(z[i]))
    return [x,y,mag, phase,z]


def main(argv):
    inputfile=''
    noisefile,outputfile='',''
    noiseflag,inputflag=0,0
    try:
        opts, args = getopt.getopt(argv,"h:i:n:o:",["ifile=","nfile=","ofile"])
    except getopt.GetoptError:
        print 'file.py -i <inputfile> -n <noisefile> -o <outputfile> '
        sys.exit(2)

    for opt, arg in opts:
        print opt ,arg,
        if opt == '-h':
            print 'file.py -i <inputfile> -n <noisefile> -o <outputfile>'
            sys.exit()
        elif opt in ("-i", "--ifile"):
            inputfile = arg
            inputflag=1
        elif opt in ("-n", "--nfile"):
            noisefile = arg
            noiseflag=1
        elif opt in ("-o", "--ofile"):
            outputfile = arg
        else:
            print "check help for usage" 
            sys.exit()

    import math
    flag=1
    fft_size=512
    #fs= 4*1e6
    fs= 500  *1e3
    #fs= 25*1000000.0
    #fs= float(50.0/3* 1000000)
    lower_cut = 1.0 *1e3 #10000.0
    upper_cut = 2.0 *1e3

    if inputflag==1:
        [x,y, mag, phase,z] = filereader(inputfile,int(fs))
        del x, y, phase
        #correlation_timeseries(mag,outputfile+'_cor_time')
        #acf_coeff= acf(mag)
        timeseries(acf_coeff,outputfile + '_acf_coeff_',int(fs))
        #mag = butter_bandpass_filter(mag, lower_cut, upper_cut, fs, order=6)
        plot_spectrogram(z, fs, outputfile+'_c_'+str(fft_size),fft_size)
        #from scipy import signal
        #z_dash=signal.decimate(z, 100,ftype='fir')
        #plot_spectrogram(z_dash, fs/100.0, outputfile+'_dec_c_'+str(fft_size),fft_size)

        plot_spectrogram(mag, fs, outputfile+'_m_'+str(fft_size),fft_size)
        #timeseries(mag,outputfile + '_normal_time',int(fs))
        #mag=butter_lowpass_filter(mag, upper_cut, fs, 6)
        #timeseries(mag,outputfile+'_bandpass_time',int(fs))
        #print "done with bandpass filter"
        #correlation_timeseries(mag,outputfile)
        #plot_spectrogram(mag, fs, outputfile+'_m_bandpass_'+str(fft_size),fft_size)
        #timeseries(mag,int(fs))
        #plot_complex_fft(z, fs, file1+'_cc_fft_'+str(fft_size),1,0)
        #plot_psd(z, fs, file1+'_psd_'+str(fft_size),1,0)
        del z
    
def plot_all_domains(inputfile, fs):
    #fs= float(50/3 * 1000000.0)   
    fs=25*1000000.0


    if inputflag==1:
        [x,y, mag, phase,z] = filereader(inputfile,int(fs))
        del x, y, phase
        #mag=butter_lowpass_filter(mag, upper_cut, fs, 6)
        #mag = butter_bandpass_filter(mag, lower_cut, upper_cut, fs, order=5)
        #print "done with bandpass filter"
        ceps, _ = complex_cepstrum(mag)
        t = [i for i in range(0,len(mag))] 
        fig = plt.figure(figsize=(12,10))
        ax0 = fig.add_subplot(311)
        ax0.plot(t, mag)
        ax0.set_ylim(0,0.18)
        ax0.set_xlabel('[time domain]  time (1 unit=10^-7 sec)')
        ax0.set_ylabel('amplitude modulus')
        #ax0.set_xlim(0.0, 0.05)

        ax1 = fig.add_subplot(312)
        ax1.plot(t, ceps)
        ax1.set_xlabel('[cepstral domain] quefrency in 1 unit')
        ax1.set_ylabel('magnitude')
        ax1.set_ylim(-80,80)
        ax1.set_xscale('log')

        ax2 = fig.add_subplot(313)

        '''
        f, Pxx_den = signal.periodogram(mag, fs)
        ax2.plot(f, Pxx_den)
        ax2.set_xlabel('frequency')
        ax2.set_ylabel('magnitude')
        ax2.set_ylim(0,7e-8)
        ax2.set_xscale('log')
        plt.savefig(outputfile+'.pdf')
        '''

        from scipy.fftpack import fft, fftfreq, fftshift
        N=len(mag)
        freqs = fftfreq(N, 1.0/fs)
        freqs = fftshift(freqs)
        yf= 1.0/N *fft(mag)
        yf = fftshift(yf)
        ax2.plot(freqs,  np.abs(yf))
        #print "freqs is ", freqs
        #print "FFT vals are",  np.abs(yf)
        ax2.set_xlabel('[spectral domain] frequency')
        ax2.set_ylabel('magnitude (log)')
        ax2.set_yscale('log')
        ax2.set_xlim(0,500000)
        ax2.set_ylim(10e-9,10e-1)

        plt.savefig(outputfile+'.pdf')


if __name__=='__main__':
    main(sys.argv[1:])
